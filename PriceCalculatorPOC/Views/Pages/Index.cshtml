@using PriceCalculatorPOC.Models;
@model PriceCalculatorViewModel

@{
    ViewData["Title"] = "Interior Design Selection";
}

<!-- Bootstrap & jQuery for styling and functionality -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>
    /* Modern styling with improved aesthetics */
    :root {
        --primary-color: #4361ee;
        --primary-hover: #3a56d4;
        --secondary-color: #6c757d;
        --success-color: #4cc9f0;
        --light-bg: #f8f9fa;
        --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
        --transition: all 0.3s ease;
    }

    body {
        font-family: 'Poppins', sans-serif;
        background-color: #f5f7fa;
        color: #333;
        line-height: 1.6;
    }

    .main-container {
        display: flex;
        max-width: 1400px;
        margin: 2rem auto;
        gap: 1.5rem;
    }

    .form-container {
        flex: 3;
        background: white;
        padding: 2.5rem;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
    }

    .summary-container {
        flex: 1;
        background: white;
        padding: 1.5rem;
        border-radius: 16px;
        box-shadow: var(--card-shadow);
        height: fit-content;
        position: sticky;
        top: 1rem;
    }

    h3 {
        color: var(--primary-color);
        font-weight: 600;
        margin-bottom: 1.5rem;
        text-align: center;
    }

    h4 {
        color: #495057;
        font-weight: 500;
        margin-bottom: 1.25rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid #e9ecef;
    }

    h5 {
        color: #343a40;
        font-weight: 500;
        font-size: 1.1rem;
    }

    /* Step sections */
    .step-section {
        display: none;
        animation: fadeIn 0.5s ease;
    }

    .active-step {
        display: block;
    }


    /* Selection grid - modern card layout */
    .selection-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1rem;
    }

    .select-card {
        display: flex;
        align-items: center;
        justify-content: center;
        height: 80px;
        background: white;
        border-radius: 12px;
        text-align: center;
        font-weight: 500;
        cursor: pointer;
        transition: var(--transition);
        border: 2px solid #e9ecef;
        box-shadow: var(--card-shadow);
        padding: 0.5rem;
    }

        .select-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.12);
            border-color: var(--primary-color);
        }

        .select-card.selected {
            background: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
            box-shadow: 0 6px 16px rgba(67, 97, 238, 0.3);
        }

    /* Room section styling */
    .room-section {
        background: #f8f9fa;
        padding: 1.25rem;
        border-radius: 12px;
        margin-top: 1.5rem;
        box-shadow: var(--card-shadow);
    }

    /* Table styling */
    .table {
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 1rem;
    }

        .table th {
            background-color: var(--primary-color);
            color: white;
            font-weight: 500;
        }

        .table td, .table th {
            padding: 0.75rem;
            vertical-align: middle;
        }

    .table-bordered {
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
    }

        .table-bordered th, .table-bordered td {
            border: 1px solid #dee2e6;
        }

    /* Form controls */
    .form-control, .form-select {
        border-radius: 8px;
        padding: 0.5rem 0.75rem;
        border: 1px solid #ced4da;
        transition: var(--transition);
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.25rem rgba(67, 97, 238, 0.25);
        }

    /* Buttons */
    .btn {
        border-radius: 8px;
        font-weight: 500;
        padding: 0.5rem 1.25rem;
        transition: var(--transition);
        border: none;
    }

    .btn-primary {
        background-color: var(--primary-color);
    }

        .btn-primary:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
        }

    .btn-outline-secondary {
        border: 1px solid var(--secondary-color);
        color: var(--secondary-color);
    }

        .btn-outline-secondary:hover {
            background-color: var(--secondary-color);
            color: white;
        }

    .btn-success {
        background-color: var(--success-color);
    }

        .btn-success:hover {
            background-color: #3ab7e0;
        }

    .btn-sm {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
    }

    /* Navigation buttons */
    .nav-buttons {
        display: flex;
        justify-content: space-between;
        margin-top: 2rem;
    }

        .nav-buttons .btn {
            min-width: 120px;
        }

    /* Feature list */
    .feature-list {
        display: none;
        margin-top: 1rem;
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: var(--card-shadow);
    }

    /* Progress indicator */
    .progress-indicator {
        display: flex;
        justify-content: center;
        margin-bottom: 2rem;
    }

    .step-bubble {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: #e9ecef;
        color: #6c757d;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: 600;
        margin: 0 0.5rem;
        position: relative;
        transition: var(--transition);
    }

        .step-bubble.active {
            background: var(--primary-color);
            color: white;
        }

        .step-bubble.completed {
            background: #4cc9f0;
            color: white;
        }

        .step-bubble:not(:last-child):after {
            content: '';
            position: absolute;
            width: 40px;
            height: 2px;
            background: #e9ecef;
            left: 100%;
        }

        .step-bubble.active:not(:last-child):after,
        .step-bubble.completed:not(:last-child):after {
            background: #4cc9f0;
        }

    /* Summary panel styling */
    .summary-title {
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 1rem;
        text-align: center;
    }

    .summary-item {
        padding: 0.75rem 0;
        border-bottom: 1px solid #eee;
    }

    .summary-item-title {
        font-weight: 500;
        margin-bottom: 0.25rem;
    }

    .summary-item-details {
        font-size: 0.85rem;
        color: #6c757d;
        margin-left: 0.5rem;
    }

    .summary-price {
        font-weight: 600;
        color: #28a745;
    }

    .summary-total {
        font-size: 1.25rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-top: 1rem;
        padding-top: 1rem;
        border-top: 2px solid #eee;
    }

    .empty-summary {
        color: #6c757d;
        text-align: center;
        font-style: italic;
        padding: 1rem 0;
    }

    /* Responsive adjustments */
    @@media (max-width: 992px) {
        .main-container {
            flex-direction: column;
        }

        .summary-container {
            position: static;
            margin-top: 2rem;
        }
    }

    @@media (max-width: 768px) {
        .form-container, .summary-container {
            padding: 1.5rem;
        }

        .selection-grid {
            grid-template-columns: repeat(2, 1fr);
        }

        .nav-buttons {
            flex-direction: column;
            gap: 1rem;
        }

            .nav-buttons .btn {
                width: 100%;
            }
    }
</style>

<!-- Main container -->
<div class="main-container">
    <div class="form-container">
        <h3>Interior Design Selection</h3>

        <!-- Progress indicator -->
        <div class="progress-indicator">
            <div class="step-bubble active">1</div>
            <div class="step-bubble">2</div>
            <div class="step-bubble">3</div>
            <div class="step-bubble">4</div>
            <div class="step-bubble">5</div>
        </div>

        <!-- Page 1: Room Selection -->
        <div id="page1" class="step-section active-step">
            <h4>Select Room(s)</h4>
            <p class="text-muted mb-4">Choose the rooms you'd like to design from the options below:</p>
            <div class="selection-grid">
                @foreach (var room in Model.Rooms)
                {
                    <div class="select-card room-select" data-id="@room.Id" data-name="@room.Name">
                        @room.Name
                    </div>
                }
            </div>
        </div>

        <!-- Page 2: Interior Elements Selection -->
        <div id="page2" class="step-section">
            <h4>Select Interior Elements</h4>
            <p class="text-muted mb-4">Customize each room by adding elements and their features:</p>
            <div id="interiorElementsContainer"></div>
        </div>

        <!-- Page 3: Fixed Units Selection -->
        <div id="page3" class="step-section">
            <h4>Select Fixed Units</h4>
            <p class="text-muted mb-4">Choose any fixed units you'd like to include in your design:</p>
            <div id="fixedUnitsContainer">
                @foreach (var unit in Model.FixedUnits)
                {
                    <div class="room-section">
                        <h5>@unit.Name</h5>
                        <table class="table table-bordered mt-2">
                            <thead>
                                <tr>
                                    <th>Field</th>
                                    <th>Price</th>
                                    <th>Quantity</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var field in unit.FixedUnitFields)
                                {
                                    <tr>
                                        <td>@field.Name</td>
                                        <td>$@field.Price</td>
                                        <td>
                                            <input type="number" class="form-control fixed-unit-quantity" min="0" value="0"
                                                   data-unit="@unit.Id" data-field="@field.Id" data-price="@field.Price">
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>

        <!-- Page 4: Additional Requests -->
        <div id="page4" class="step-section">
            <h4>Additional Requests (Optional)</h4>
            <p class="text-muted mb-4">Add any special requests or notes for your design:</p>
            <textarea id="additionalRequests" class="form-control" rows="5"
                      placeholder="Enter any additional requests or special instructions..."></textarea>
        </div>

        <!-- Page 5: Submit -->
        <div id="page5" class="step-section text-center">
            <h4>Review and Submit Your Design</h4>
            <p class="text-muted mb-4">Review your selections below and submit when ready.</p>
            <div class="d-grid gap-2 col-md-6 mx-auto">
                <button id="submitBtn" class="btn btn-success btn-lg">
                    <i class="fas fa-paper-plane me-2"></i>Submit Design
                </button>
            </div>
        </div>

        <!-- Navigation Buttons -->
        <div class="nav-buttons">
            <button id="prevBtn" class="btn btn-outline-secondary" disabled>
                <i class="fas fa-arrow-left me-2"></i>Previous
            </button>
            <button id="nextBtn" class="btn btn-primary">
                Next<i class="fas fa-arrow-right ms-2"></i>
            </button>
        </div>
    </div>

    <!-- Summary Panel -->
    <div class="summary-container">
        <h4 class="summary-title">Your Selections</h4>
        <div id="summaryContent">
            <div class="empty-summary">No selections made yet</div>
        </div>
        <div id="summaryTotal" class="summary-total">Total: $0.00</div>
    </div>
</div>

<script>
    // Global variables to track state
    let currentPage = 1;
    let totalPages = 5;
    let selectedRooms = {}; // Stores selected rooms and their elements
    let selectedFixedUnits = {}; // Stores selected fixed units
    let totalPrice = 0; // Tracks the total price

    /**
    * Shows the specified page and updates navigation buttons
    * {number} page - The page number to show
    */
    function showPage(page) {
        // Hide all steps
        $(".step-section").removeClass("active-step");
        // Show the requested step
        $("#page" + page).addClass("active-step");

        // Update button states
        $("#prevBtn").prop("disabled", page === 1);
        $("#nextBtn").prop("disabled", page === totalPages);

        // Update progress indicator
        $(".step-bubble").removeClass("active completed");
        $(".step-bubble").each(function(index) {
            if (index + 1 < page) {
                $(this).addClass("completed");
            } else if (index + 1 === page) {
                $(this).addClass("active");
            }
        });
    }

    /**
    * Updates the summary panel with current selections
    */
    function updateSummary() {
        let summaryHTML = '';
        totalPrice = 0;

        // Add rooms and their elements to summary
        for (let roomId in selectedRooms) {
            let room = selectedRooms[roomId];
            let roomTotal = 0;
            let elementsHTML = '';

            // Add elements for this room
            for (let elementId in room.elements) {
                let element = room.elements[elementId];
                elementsHTML += `
                    <div class="summary-item-details">
                        <i class="fas fa-chevron-right me-1"></i>${element.name}
                        <span class="float-end">$${element.price.toFixed(2)}</span>
                    </div>
                `;
                roomTotal += element.price;
            }

            if (elementsHTML) {
                summaryHTML += `
                    <div class="summary-item">
                        <div class="summary-item-title">
                            <i class="fas fa-door-open me-2"></i>${room.name}
                            <span class="summary-price float-end">$${roomTotal.toFixed(2)}</span>
                        </div>
                        ${elementsHTML}
                    </div>
                `;
                totalPrice += roomTotal;
            }
        }

        // Add fixed units to summary
        let fixedUnitsHTML = '';
        let fixedUnitsTotal = 0;
        for (let unitId in selectedFixedUnits) {
            let unit = selectedFixedUnits[unitId];
            let unitTotal = 0;
            let fieldsHTML = '';

            for (let fieldId in unit.fields) {
                let field = unit.fields[fieldId];
                let fieldTotal = field.price * field.quantity;
                fieldsHTML += `
                    <div class="summary-item-details">
                        <i class="fas fa-chevron-right me-1"></i>${field.name} (${field.quantity})
                        <span class="float-end">$${fieldTotal.toFixed(2)}</span>
                    </div>
                `;
                unitTotal += fieldTotal;
            }

            if (fieldsHTML) {
                fixedUnitsHTML += `
                    <div class="summary-item">
                        <div class="summary-item-title">
                            <i class="fas fa-cube me-2"></i>${unit.name}
                            <span class="summary-price float-end">$${unitTotal.toFixed(2)}</span>
                        </div>
                        ${fieldsHTML}
                    </div>
                `;
                fixedUnitsTotal += unitTotal;
            }
        }

        if (fixedUnitsHTML) {
            summaryHTML += fixedUnitsHTML;
            totalPrice += fixedUnitsTotal;
        }

        // Update summary content
        if (summaryHTML === '') {
            summaryHTML = '<div class="empty-summary">No selections made yet</div>';
        }

        $("#summaryContent").html(summaryHTML);
        $("#summaryTotal").text(`Total: $${totalPrice.toFixed(2)}`);
    }

    // Document ready handler
    $(function() {
        // Room selection handler
        $(".room-select").click(function() {
            let roomId = $(this).data("id");
            let roomName = $(this).data("name");

            // Toggle selection state
            $(this).toggleClass("selected");

            // Update selected rooms object
            if ($(this).hasClass("selected")) {
                selectedRooms[roomId] = {
                    name: roomName,
                    elements: {}
                };
            } else {
                delete selectedRooms[roomId];
            }

            updateSummary();
        });

        // Fixed unit quantity change handler
        $(document).on("change", ".fixed-unit-quantity", function() {
            let unitId = $(this).data("unit");
            let fieldId = $(this).data("field");
            let quantity = parseInt($(this).val(), 10);
            let price = parseFloat($(this).data("price"));
            let fieldName = $(this).closest("tr").find("td:first").text();
            let unitName = $(this).closest(".room-section").find("h5").text();

            // Initialize unit if not exists
            if (!selectedFixedUnits[unitId]) {
                selectedFixedUnits[unitId] = {
                    name: unitName,
                    fields: {}
                };
            }

            // Update or remove field
            if (quantity > 0) {
                selectedFixedUnits[unitId].fields[fieldId] = {
                    name: fieldName,
                    price: price,
                    quantity: quantity
                };
            } else {
                delete selectedFixedUnits[unitId].fields[fieldId];

                // Remove unit if no fields left
                if (Object.keys(selectedFixedUnits[unitId].fields).length === 0) {
                    delete selectedFixedUnits[unitId];
                }
            }

            updateSummary();
        });

        // Next button click handler
        $("#nextBtn").click(function() {
            // Page 1 validation and setup for page 2
            if (currentPage === 1) {
                // Validate room selection
                if (Object.keys(selectedRooms).length === 0) {
                    alert("Please select at least one room.");
                    return;
                }

                // Build interior elements selection UI for each selected room
                let container = $("#interiorElementsContainer").html("");
                for (let roomId in selectedRooms) {
                    let room = selectedRooms[roomId];

                    // Create room section with elements table
                    let section = `
                    <div class="room-section">
                        <h5 class="room-title">${room.name}</h5>
                        <table class="table table-bordered mt-2">
                            <thead>
                                <tr>
                                    <th>Element</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody class="interior-elements" data-room="${roomId}">
    @foreach (var element in Model.InteriorElements)
    {
                                        <tr class="element-row" data-id="@element.Id" data-room="${roomId}">
                                            <td>@element.Name</td>
                                            <td>
                                                <button class="btn btn-success btn-sm add-element">Add</button>
                                                <button class="btn btn-danger btn-sm remove-element" style="display: none;">Remove</button>
                                            </td>
                                        </tr>
                                        <tr class="feature-list" id="features_${roomId}_@element.Id" style="display: none;">
                                            <td colspan="2">
                                                <h6>Select Features for @element.Name</h6>
                                                <table class="table table-bordered">
                                                    <tbody>
                        @{
                            var elementFeatures = Model.CustomizationFeatures.Where(f => f.InteriorElementId == element.Id).ToList();
                        }
                        @foreach (var feature in elementFeatures)
                        {
                            if (feature.FeatureFields.Any())
                            {
                                                                    <tr>
                                                                        <td>@feature.Name</td>
                                                                        <td>
                                                                            <select class="form-select feature-select">
                                                                                <option value="">Select @feature.Name</option>
                                            @foreach (var field in feature.FeatureFields)
                                            {
                                                                                        <option value="@field.Id" data-price="@field.Price">@field.Name (Qty: @field.Quantity, Price: @field.Price)</option>
                                            }
                                                                            </select>
                                                                        </td>
                                                                        <td>
                                                                            <input type="number" class="form-control feature-quantity" value="1" min="1">
                                                                        </td>
                                                                    </tr>
                            }
                        }
                                                    </tbody>
                                                </table>
                                                <div class="d-flex justify-content-end gap-2 mt-3">
                                                    <button class="btn btn-danger discard-features">Discard</button>
                                                    <button class="btn btn-primary save-features">Save Features</button>
                                                </div>
                                            </td>
                                        </tr>
    }
                            </tbody>
                        </table>
                    </div>
                    `;
                    container.append(section);
                }

                // Set up event handlers for the newly created elements
                setupElementHandlers();
            }

            // Advance to next page
            currentPage++;
            showPage(currentPage);
        });

        // Previous button click handler
        $("#prevBtn").click(function() {
            if (currentPage > 1) {
                currentPage--;
                showPage(currentPage);
            }
        });

        // Submit button click handler
        $("#submitBtn").click(function() {
            // Collect additional requests
            let additionalRequests = $("#additionalRequests").val();

            // Prepare form data
            let formData = {
                rooms: selectedRooms,
                fixedUnits: selectedFixedUnits,
                additionalRequests: additionalRequests,
                totalPrice: totalPrice
            };

            // Log and show success message (in a real app, this would be an AJAX call)
            console.log("Form Data:", formData);
            alert(`Your design selections have been submitted successfully!\nTotal Price: $${totalPrice.toFixed(2)}`);
        });
    });

    // Helper function to set up element handlers
    function setupElementHandlers() {
        // Add element button handler
        $(".add-element").click(function() {
            let row = $(this).closest("tr");
            let roomId = row.data("room");
            let elementId = row.data("id");

            // Show feature selection for this element
            $("#features_" + roomId + "_" + elementId).show();
            $(this).prop("disabled", true);
            $(this).siblings(".remove-element").hide();
        });

        // Save features button handler
        $(".save-features").click(function() {
            let row = $(this).closest(".feature-list");
            let roomId = row.attr("id").split("_")[1];
            let elementId = row.attr("id").split("_")[2];
            let elementName = $(".element-row[data-id='" + elementId + "'][data-room='" + roomId + "']").find("td:first").text();
            let allSelected = true;
            let elementPrice = 0;

            // Validate all feature selections and calculate price
            row.find(".feature-select").each(function() {
                if ($(this).val() === "") {
                    allSelected = false;
                } else {
                    let quantity = parseInt($(this).closest("tr").find(".feature-quantity").val(), 10);
                    let price = parseFloat($(this).find("option:selected").data("price"));
                    elementPrice += price * quantity;
                }
            });

            if (!allSelected) {
                alert("Please select a field for each feature.");
                return;
            }

            // Add element to selected rooms
            selectedRooms[roomId].elements[elementId] = {
                name: elementName,
                price: elementPrice
            };

            // Hide feature selection and update UI
            row.hide();
            $(".element-row[data-id='" + elementId + "'][data-room='" + roomId + "']")
                .find(".add-element").hide()
                .siblings(".remove-element").show();

            updateSummary();
        });

        // Discard features button handler
        $(".discard-features").click(function() {
            let row = $(this).closest(".feature-list");
            let roomId = row.attr("id").split("_")[1];
            let elementId = row.attr("id").split("_")[2];

            // Reset and hide feature selection
            row.hide();
            $("#features_" + roomId + "_" + elementId + " .feature-select").val("");
            $("#features_" + roomId + "_" + elementId + " .feature-quantity").val(1);
            $(".element-row[data-id='" + elementId + "'][data-room='" + roomId + "']")
                .find(".add-element").prop("disabled", false)
                .show()
                .siblings(".remove-element").hide();
        });

        // Remove element button handler
        $(".remove-element").click(function() {
            let row = $(this).closest("tr");
            let roomId = row.data("room");
            let elementId = row.data("id");

            // Remove from selected elements
            delete selectedRooms[roomId].elements[elementId];

            // Update UI
            $(this).hide();
            $(this).siblings(".add-element").show().prop("disabled", false);

            updateSummary();
        });
    }
</script>